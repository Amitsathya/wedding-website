version: '3.8'

services:
  app:
    build: 
      context: ..
      dockerfile: docker/Dockerfile
    ports:
      - "8080:8080"
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=wedding_user
      - DB_PASSWORD=wedding_password
      - DB_NAME=wedding_db
      - DB_SSLMODE=disable
      - REDIS_ADDR=redis:6379
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - S3_BUCKET=${S3_BUCKET:-wedding-app-photos}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - wedding-network

  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=wedding_user
      - POSTGRES_PASSWORD=wedding_password
      - POSTGRES_DB=wedding_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U wedding_user -d wedding_db"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - wedding-network

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - wedding-network

  adminer:
    image: adminer
    ports:
      - "8081:8080"
    depends_on:
      - postgres
    networks:
      - wedding-network

volumes:
  postgres_data:
  redis_data:

networks:
  wedding-network:
    driver: bridge